#include<stdio.h>

#include<string.h>
#include<iostream>
using namespace std;
struct  stack{
    int size;
    int top;
    char * arr;
};
int stacktop (struct stack *sp){
    return sp->arr[sp->top];
}
int isempty(struct stack *p) {
    if(p->top==-1){
        return 1;
    }
    else{
        return 0;
    }
}
int isfull(struct stack *p){
    if(p->top==p->size-1){
        return 1;
    }
    else{
        return 0;
    }
}
void push(struct stack *p , int val){
    if(isfull(p)){
        printf("push not allowed\n");
    }
    else{
        p->size++;
        p->arr[p->top]=val;
    }
}
char pop(struct stack *p){
    if(isempty(p)){
        printf("pop not allowed\n");
        return -1;
    }
    else{
        char val = p->arr[p->top];
        p->top--;
        return val;
    }
}
int precedance(char ch){
    
    if(ch =='*' || ch =='/'){
        return 3;
    }
    else if(ch =='+' || ch =='-'){
        return 2;
    }
    else{
        return 0;
    }
}
int isoperator(char ch){
    if (ch =='*' || ch=='/' || ch=='+' || ch=='-'){ 
        return 1;
    }
    else {
        return 0;
    }
}
char* infixpostfix(char *infix){
    struct stack *sp = (struct stack * )malloc(sizeof(struct stack));
    sp->size = 10;
    sp->top = -1;
    sp->arr = (char *)malloc(sp->size*sizeof(char));
    char *postfix = (char *)malloc((strlen(infix)+1)*sizeof(char));
    int i = 0 ,j = 0;
    while(infix[i]!='\0'){
        if ((isoperator(infix[i])))
        {
            postfix[j] = infix[i];
            i++;
            j++;
        }
        else{
            if(precedance(infix[i]) > precedance(stacktop(sp))){
                push(sp , infix[i]);
                i++;
            }else{
                postfix[j] = pop(sp);
                j++;
            }
        }
    }
    while (!isempty(sp))
    {
        postfix[j] = pop(sp);
        j++;
    }
    postfix[j] = '\0';
    return postfix;    
}
int main()
{
    char *infix = "a+b/c-d+k*z";
    printf("postfix: %s\n", infixpostfix(infix));
    return 0;
}
